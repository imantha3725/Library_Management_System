/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import javax.swing.JOptionPane;

import java.util.logging.*;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KADSE241F-042
 * * @version 1.0
 * @since 2025-02-07

 */
public class Book extends javax.swing.JFrame {

    
    public Book() {
        initComponents();
        setResizable(false);
setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        avatar_NoBorder2 = new Components.Avatar_NoBorder();
        jLabel2 = new javax.swing.JLabel();
        btnDashboard1 = new Components.CustomButton();
        btnAuthors1 = new Components.CustomButton();
        btnMembers1 = new Components.CustomButton();
        btnBooks1 = new Components.CustomButton();
        btnLogout1 = new Components.CustomButton();
        roundedPanel1 = new Components.RoundedPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtBookId = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        txtBookAuthor = new javax.swing.JTextField();
        roundedImageComponent1 = new Components.RoundedImageComponent();
        customButton1 = new Components.CustomButton();
        customButton2 = new Components.CustomButton();
        customButton3 = new Components.CustomButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        book_tb = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 29, 61));

        jPanel4.setBackground(new java.awt.Color(0, 53, 102));

        avatar_NoBorder2.setImage(new javax.swing.ImageIcon(getClass().getResource("/Images/books.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Elite Library");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(avatar_NoBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(42, 42, 42))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avatar_NoBorder2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnDashboard1.setText("Dashboard");
        btnDashboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDashboard1ActionPerformed(evt);
            }
        });

        btnAuthors1.setText("Authors");
        btnAuthors1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthors1ActionPerformed(evt);
            }
        });

        btnMembers1.setText("Members");
        btnMembers1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMembers1ActionPerformed(evt);
            }
        });

        btnBooks1.setText("BOOKS");
        btnBooks1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBooks1ActionPerformed(evt);
            }
        });

        btnLogout1.setText("LOG OUT");
        btnLogout1.setButtonColor(new java.awt.Color(255, 51, 51));
        btnLogout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogout1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDashboard1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(btnAuthors1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMembers1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBooks1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnDashboard1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAuthors1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMembers1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBooks1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(btnLogout1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        roundedPanel1.setBackground(new java.awt.Color(0, 29, 61));

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Book ID");

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Book Name");

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Author");

        txtBookId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtBookName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtBookAuthor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        roundedImageComponent1.setImage(new javax.swing.ImageIcon(getClass().getResource("/Images/ai-generated-8734944_1280.png"))); // NOI18N

        customButton1.setText("INSERT");
        customButton1.setButtonColor(new java.awt.Color(0, 255, 102));
        customButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton1ActionPerformed(evt);
            }
        });

        customButton2.setText("UPDATE");
        customButton2.setButtonColor(new java.awt.Color(0, 153, 255));
        customButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton2ActionPerformed(evt);
            }
        });

        customButton3.setText("DELETE");
        customButton3.setButtonColor(new java.awt.Color(255, 0, 51));
        customButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundedPanel1Layout = new javax.swing.GroupLayout(roundedPanel1);
        roundedPanel1.setLayout(roundedPanel1Layout);
        roundedPanel1Layout.setHorizontalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundedPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(405, 405, 405))
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBookAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(txtBookName)
                    .addComponent(txtBookId))
                .addGap(145, 145, 145)
                .addComponent(roundedImageComponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        roundedPanel1Layout.setVerticalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundedPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundedPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(roundedImageComponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        book_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(book_tb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(roundedPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(roundedPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDashboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDashboard1ActionPerformed
        Dashboard dasboardFrame = new Dashboard (); 
    dasboardFrame.setVisible(true); 
    dasboardFrame.setLocationRelativeTo(null); 
    this.dispose();
    }//GEN-LAST:event_btnDashboard1ActionPerformed

    private void btnAuthors1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthors1ActionPerformed
         Author authorFrame = new Author(); 
    authorFrame.setVisible(true); 
    authorFrame.setLocationRelativeTo(null); 
    this.dispose();
    }//GEN-LAST:event_btnAuthors1ActionPerformed

    private void btnMembers1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMembers1ActionPerformed
       Member memberFrame = new Member();
        memberFrame.setVisible(true);
        memberFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnMembers1ActionPerformed

    private void btnBooks1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBooks1ActionPerformed
        Book bookFrame = new Book();
        bookFrame.setVisible(true);
        bookFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnBooks1ActionPerformed

    private void btnLogout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogout1ActionPerformed
       int choice = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to logout?",
        "Confirm Logout",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
    
   
    if (choice == JOptionPane.YES_OPTION) {
        LoginForm loginFrame = new LoginForm();
        loginFrame.setVisible(true);
        loginFrame.setLocationRelativeTo(null);
        this.dispose();
    }
    }//GEN-LAST:event_btnLogout1ActionPerformed

    private void loadBookData() {
    dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        
        String query = "SELECT * FROM book";
        pst = con.prepareStatement(query);
        rs = pst.executeQuery();

        
        DefaultTableModel model = (DefaultTableModel) book_tb.getModel();
        model.setRowCount(0); 

        
        while (rs.next()) {
            String bookId = rs.getString("book_id");
            String bookName = rs.getString("book_name");
            String author = rs.getString("author");

           
            model.addRow(new Object[]{bookId, bookName, author});
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading book data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, "Error closing resources", ex);
        }
    }
}
    
     private void clearFields() {
    txtBookId.setText("");
    txtBookName.setText("");
    txtBookAuthor.setText("");
    
    }
    
    private void customButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton1ActionPerformed
        dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;

    try {
        
        String bookId = txtBookId.getText().trim();
        String bookName = txtBookName.getText().trim();
        String bookAuthor = txtBookAuthor.getText().trim();

        
        if (bookId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookId.requestFocus();
            return;
        }
        if (bookName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book Name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookName.requestFocus();
            return;
        }
        if (bookAuthor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author Name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookAuthor.requestFocus();
            return;
        }

        
        if (con == null || con.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is not available", "Connection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        PreparedStatement checkStmt = con.prepareStatement("SELECT book_id FROM book WHERE book_id = ?");
        checkStmt.setString(1, bookId);
        ResultSet rs = checkStmt.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(this, "Book ID already exists", "Insert Error", JOptionPane.ERROR_MESSAGE);
            txtBookId.requestFocus();
            return;
        }

        
        pst = con.prepareStatement("INSERT INTO book (book_id, book_name, author) VALUES (?, ?, ?)");

        pst.setString(1, bookId);
        pst.setString(2, bookName);
        pst.setString(3, bookAuthor);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record Inserted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadBookData();  
            clearFields();  
        } else {
            JOptionPane.showMessageDialog(this, "Failed to insert record", "Insert Error", JOptionPane.WARNING_MESSAGE);
        }

    } catch (SQLException ex) {
        String errorMessage = "Error inserting record: " + ex.getMessage();
        JOptionPane.showMessageDialog(this, errorMessage, "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, errorMessage, ex);
    } finally {
        try {
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, "Error closing statement", ex);
        }
    }
    }//GEN-LAST:event_customButton1ActionPerformed

    private void customButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton2ActionPerformed
       dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;

    try {
       
        String bookId = txtBookId.getText().trim();
        String bookName = txtBookName.getText().trim();
        String author = txtBookAuthor.getText().trim();

        
        if (bookId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookId.requestFocus();
            return;
        }

        if (bookName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookName.requestFocus();
            return;
        }

        if (author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookAuthor.requestFocus();
            return;
        }

       
        if (con == null || con.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is not available", "Connection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        PreparedStatement checkStmt = con.prepareStatement("SELECT book_id FROM book WHERE book_id = ?");
        checkStmt.setString(1, bookId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Book ID does not exist", "Update Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        pst = con.prepareStatement("UPDATE book SET book_name = ?, author = ? WHERE book_id = ?");
        pst.setString(1, bookName);
        pst.setString(2, author);
        pst.setString(3, bookId);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadBookData();  
            clearFields();  
        } else {
            JOptionPane.showMessageDialog(this, "No records were updated", "Update Error", JOptionPane.WARNING_MESSAGE);
        }

    } catch (SQLException ex) {
        String errorMessage = "Error updating record: " + ex.getMessage();
        JOptionPane.showMessageDialog(this, errorMessage, "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, errorMessage, ex);
    } finally {
        try {
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, "Error closing statement", ex);
        }
    }
    }//GEN-LAST:event_customButton2ActionPerformed

    private void customButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton3ActionPerformed
        dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;

    try {
        
        String bookId = txtBookId.getText().trim();

      
        if (bookId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Book ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtBookId.requestFocus();
            return;
        }

       
        if (con == null || con.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is not available", "Connection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

       
        PreparedStatement checkStmt = con.prepareStatement("SELECT book_id FROM book WHERE book_id = ?");
        checkStmt.setString(1, bookId);
        ResultSet rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Book ID does not exist", "Delete Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        pst = con.prepareStatement("DELETE FROM book WHERE book_id = ?");
        pst.setString(1, bookId);

        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record Deleted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadBookData(); 
            clearFields();  
        } else {
            JOptionPane.showMessageDialog(this, "No records were deleted", "Delete Error", JOptionPane.WARNING_MESSAGE);
        }

    } catch (SQLException ex) {
        String errorMessage = "Error deleting record: " + ex.getMessage();
        JOptionPane.showMessageDialog(this, errorMessage, "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Book.class.getName()).log(Level.SEVERE, errorMessage, ex);
    } finally {
        try {
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Book.class.getName()).log(Level.SEVERE, "Error closing statement", ex);
        }
    }
    }//GEN-LAST:event_customButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Book().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Components.Avatar_NoBorder avatar_NoBorder2;
    private javax.swing.JTable book_tb;
    private Components.CustomButton btnAuthors1;
    private Components.CustomButton btnBooks1;
    private Components.CustomButton btnDashboard1;
    private Components.CustomButton btnLogout1;
    private Components.CustomButton btnMembers1;
    private Components.CustomButton customButton1;
    private Components.CustomButton customButton2;
    private Components.CustomButton customButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private Components.RoundedImageComponent roundedImageComponent1;
    private Components.RoundedPanel roundedPanel1;
    private javax.swing.JTextField txtBookAuthor;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtBookName;
    // End of variables declaration//GEN-END:variables
}
