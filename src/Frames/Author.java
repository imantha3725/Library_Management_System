/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;

import java.util.logging.*;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author KADSE241F-042
 * * @version 1.0
 * @since 2025-02-07

 */
public class Author extends javax.swing.JFrame {

    /**
     * Creates new form Author
     */
    public Author() {
        initComponents();
        setResizable(false);
setLocationRelativeTo(null);
init();
    
    }
   
    
    public void init(){
        dbconnection dbcon = dbconnection.getInstance();
        Connection connection = dbcon.getConnection();
        
        DefaultTableModel tablemodel = new DefaultTableModel();
        author_tb.setModel(tablemodel);
        
        String getData = "SELECT Author_Id, Author_Name, Email, Contact";
        String[] columnnames = {"Author_Id","Author_Name","Email","Contact"};
        tablemodel.setColumnIdentifiers(columnnames);
        try {
            Statement stmt = connection.createStatement();
            ResultSet result = stmt.executeQuery(getData);
            
            while(result.next()){
                Object[] row = new Object[4];
                row[0] = result.getObject("Author_Id");
                row[1] = result.getObject("Author_Name");
                row[2] = result.getObject("Email");
                row[3] = result.getObject("Contact");
                tablemodel.addRow(row);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void clearFields() {
    txtauthorId.setText("");
    txtauthorName.setText("");
    txtauthorEmail.setText("");
    txtauthorContact.setText("");
    
    
}
    private void loadAuthorData() {
    dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
       
        String sql = "SELECT * FROM author";
        pst = con.prepareStatement(sql);
        rs = pst.executeQuery();

        
        DefaultTableModel model = (DefaultTableModel) author_tb.getModel();
        model.setRowCount(0); 

        
        while (rs.next()) {
            String authorId = rs.getString("authorid");
            String authorName = rs.getString("authorname");
            String email = rs.getString("email");
            String contact = rs.getString("contact");

            
            model.addRow(new Object[]{authorId, authorName, email, contact});
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error loading author data", ex);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error closing resources", ex);
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        avatar_NoBorder1 = new Components.Avatar_NoBorder();
        jLabel1 = new javax.swing.JLabel();
        btnDashboard = new Components.CustomButton();
        btnAuthors = new Components.CustomButton();
        btnMembers = new Components.CustomButton();
        btnBooks = new Components.CustomButton();
        btnLogout = new Components.CustomButton();
        roundedPanel1 = new Components.RoundedPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtauthorId = new javax.swing.JTextField();
        txtauthorName = new javax.swing.JTextField();
        txtauthorEmail = new javax.swing.JTextField();
        txtauthorContact = new javax.swing.JTextField();
        roundedImageComponent1 = new Components.RoundedImageComponent();
        customButton1 = new Components.CustomButton();
        customButton2 = new Components.CustomButton();
        customButton3 = new Components.CustomButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        author_tb = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1039, 576));

        jPanel1.setBackground(new java.awt.Color(0, 29, 61));

        jPanel2.setBackground(new java.awt.Color(0, 53, 102));

        avatar_NoBorder1.setImage(new javax.swing.ImageIcon(getClass().getResource("/Images/books.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Elite Library");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(avatar_NoBorder1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avatar_NoBorder1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnDashboard.setText("Dashboard");
        btnDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDashboardActionPerformed(evt);
            }
        });

        btnAuthors.setText("Authors");
        btnAuthors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorsActionPerformed(evt);
            }
        });

        btnMembers.setText("Members");
        btnMembers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMembersActionPerformed(evt);
            }
        });

        btnBooks.setText("BOOKS");
        btnBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBooksActionPerformed(evt);
            }
        });

        btnLogout.setText("LOG OUT");
        btnLogout.setButtonColor(new java.awt.Color(255, 51, 51));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDashboard, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(btnAuthors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMembers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAuthors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMembers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBooks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        roundedPanel1.setBackground(new java.awt.Color(0, 29, 61));

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Author ID");

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Author Name");

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Email");

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Contact No");

        txtauthorId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtauthorName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtauthorEmail.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        txtauthorContact.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        roundedImageComponent1.setImage(new javax.swing.ImageIcon(getClass().getResource("/Images/ai-generated-8734944_1280.png"))); // NOI18N

        customButton1.setText("INSERT");
        customButton1.setButtonColor(new java.awt.Color(0, 255, 102));
        customButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton1ActionPerformed(evt);
            }
        });

        customButton2.setText("UPDATE");
        customButton2.setButtonColor(new java.awt.Color(0, 153, 255));
        customButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton2ActionPerformed(evt);
            }
        });

        customButton3.setText("DELETE");
        customButton3.setButtonColor(new java.awt.Color(255, 0, 51));
        customButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundedPanel1Layout = new javax.swing.GroupLayout(roundedPanel1);
        roundedPanel1.setLayout(roundedPanel1Layout);
        roundedPanel1Layout.setHorizontalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(88, 88, 88)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtauthorEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(txtauthorName)
                    .addComponent(txtauthorContact)
                    .addComponent(txtauthorId))
                .addGap(110, 110, 110)
                .addComponent(roundedImageComponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundedPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(customButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(405, 405, 405))
        );
        roundedPanel1Layout.setVerticalGroup(
            roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundedPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(roundedImageComponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundedPanel1Layout.createSequentialGroup()
                        .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtauthorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(txtauthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(txtauthorEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtauthorContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roundedPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel5)
                        .addGap(13, 13, 13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(roundedPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        author_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(author_tb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roundedPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roundedPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDashboardActionPerformed
        Dashboard dasboardFrame = new Dashboard (); 
    dasboardFrame.setVisible(true); 
    dasboardFrame.setLocationRelativeTo(null); 
    this.dispose();
    }//GEN-LAST:event_btnDashboardActionPerformed

    private void btnAuthorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorsActionPerformed
        Author authorFrame = new Author(); 
    authorFrame.setVisible(true); 
    authorFrame.setLocationRelativeTo(null); 
    this.dispose();
    }//GEN-LAST:event_btnAuthorsActionPerformed

    private void btnMembersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMembersActionPerformed
        Member memberFrame = new Member();
        memberFrame.setVisible(true);
        memberFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnMembersActionPerformed

    private void btnBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBooksActionPerformed
        Book bookFrame = new Book();
        bookFrame.setVisible(true);
        bookFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnBooksActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
       int choice = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to logout?",
        "Confirm Logout",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
    
    
    if (choice == JOptionPane.YES_OPTION) {
        LoginForm loginFrame = new LoginForm();
        loginFrame.setVisible(true);
        loginFrame.setLocationRelativeTo(null);
        this.dispose();
    }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void customButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton1ActionPerformed
        dbconnection dbcon = dbconnection.getInstance();
        Connection connection = dbcon.getConnection();
        
        PreparedStatement pst = null;
    PreparedStatement checkStmt = null;
    ResultSet rs = null;
        
        try{
            int authorid = Integer.parseInt(txtauthorId.getText().trim());
        String authorname = txtauthorName.getText();
        String email = txtauthorEmail.getText();
        int contact = Integer.parseInt(txtauthorId.getText());
        
       
          if (txtauthorId.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorId.requestFocus();
            return;
        }
        
        if (authorname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorName.requestFocus();
            return;
        }
        
       
        if (email.isEmpty() || !email.contains("@") || !email.contains(".")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid email address", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorEmail.requestFocus();
            return;
        }
        
        
        if (connection == null || connection.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is not available", "Connection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
         checkStmt = connection.prepareStatement("SELECT authorid FROM author WHERE studentid = ?");
        checkStmt.setInt(1, authorid);
        rs = checkStmt.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(this, "Author ID already exists", "Insert Error", JOptionPane.ERROR_MESSAGE);
            txtauthorId.requestFocus();
            return;
        }
        
        
        pst = connection.prepareStatement("INSERT INTO author (authorid, authorname, email, contact) VALUES (?, ?, ?, ?)");

        pst.setInt(1, authorid);
        pst.setString(2, authorname);
        pst.setString(3, email);
        pst.setInt(4, contact);

        int rowsAffected = pst.executeUpdate();
        
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record Inserted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAuthorData();
           
            clearFields();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to insert record", "Insert Error", JOptionPane.WARNING_MESSAGE);
        }
        
    } catch (SQLException ex) {
        String errorMessage = "Error inserting record: " + ex.getMessage();
        JOptionPane.showMessageDialog(this, errorMessage, "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Author.class.getName()).log(Level.SEVERE, errorMessage, ex);
    } finally {
        try {
            if (pst != null) {
                pst.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error closing statement", ex);
        }
        init();
    }
        
        
        
        
        
    }//GEN-LAST:event_customButton1ActionPerformed

    private void customButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton2ActionPerformed
        dbconnection dbcon = dbconnection.getInstance();
    Connection con = dbcon.getConnection();
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        
        String authorid = txtauthorId.getText().trim();
        String authorname = txtauthorName.getText().trim();
        String email = txtauthorEmail.getText().trim();
        String contact = txtauthorContact.getText().trim();

       
        if (authorid.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorId.requestFocus();
            return;
        }

        if (authorname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Author name is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorName.requestFocus();
            return;
        }

        if (email.isEmpty() || !email.contains("@") || !email.contains(".")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid email address", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorEmail.requestFocus();
            return;
        }

        if (contact.isEmpty() || !contact.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid contact number", "Validation Error", JOptionPane.WARNING_MESSAGE);
            txtauthorContact.requestFocus();
            return;
        }

       
        if (con == null || con.isClosed()) {
            JOptionPane.showMessageDialog(this, "Database connection is not available", "Connection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

       
        PreparedStatement checkStmt = con.prepareStatement("SELECT authorid FROM author WHERE authorid = ?");
        checkStmt.setString(1, authorid);
        rs = checkStmt.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "Author ID does not exist", "Update Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        pst = con.prepareStatement("UPDATE author SET authorname = ?, email = ?, contact = ? WHERE authorid = ?");
        
        pst.setString(1, authorname);
        pst.setString(2, email);
        pst.setString(3, contact);
        pst.setString(4, authorid);
        
        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAuthorData();  
            clearFields();  
        } else {
            JOptionPane.showMessageDialog(this, "No records were updated", "Update Error", JOptionPane.WARNING_MESSAGE);
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error updating record: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error updating record", ex);
    } finally {
        try {
            if (pst != null) pst.close();
            if (rs != null) rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error closing resources", ex);
        }
    }
    }//GEN-LAST:event_customButton2ActionPerformed

    private void customButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customButton3ActionPerformed
       int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    
    if (confirm == JOptionPane.YES_OPTION) {
        dbconnection dbcon = dbconnection.getInstance();
        Connection con = dbcon.getConnection();
        PreparedStatement pst = null;

        try {
            String authorid = txtauthorId.getText().trim();

            if (authorid.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Author ID is required", "Validation Error", JOptionPane.WARNING_MESSAGE);
                txtauthorId.requestFocus();
                return;
            }

            pst = con.prepareStatement("DELETE FROM author WHERE authorid = ?");
            pst.setString(1, authorid);

            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record Deleted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadAuthorData();  
                clearFields();     
            } else {
                JOptionPane.showMessageDialog(this, "No matching record found", "Delete Error", JOptionPane.WARNING_MESSAGE);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting record: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error deleting record", ex);
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Author.class.getName()).log(Level.SEVERE, "Error closing statement", ex);
            }
        }
    }
    }//GEN-LAST:event_customButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Author.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Author().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable author_tb;
    private Components.Avatar_NoBorder avatar_NoBorder1;
    private Components.CustomButton btnAuthors;
    private Components.CustomButton btnBooks;
    private Components.CustomButton btnDashboard;
    private Components.CustomButton btnLogout;
    private Components.CustomButton btnMembers;
    private Components.CustomButton customButton1;
    private Components.CustomButton customButton2;
    private Components.CustomButton customButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private Components.RoundedImageComponent roundedImageComponent1;
    private Components.RoundedPanel roundedPanel1;
    private javax.swing.JTextField txtauthorContact;
    private javax.swing.JTextField txtauthorEmail;
    private javax.swing.JTextField txtauthorId;
    private javax.swing.JTextField txtauthorName;
    // End of variables declaration//GEN-END:variables
}
